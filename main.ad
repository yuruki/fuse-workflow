= Real World Enterprise Workflow for Red Hat JBoss Fuse
Jyrki Ruuskanen, Finavia Corporation, 2014
:backend: deckjs
:deckjs_theme: swiss
:status:
:split:

== Where do we start from?

* A team of 2-3 developers who also operate the environments (got the Devs and the Ops right there).
* Red Hat JBoss Fuse license for 16 processor cores.
* Green light from the bosses to make Fuse our new integration platform.

=== What are we trying to achieve?

* A highly available setup manageable by a small team.
* Manual steps kept at minimum, while keeping the setup simple.
* Everything versioned and reversible.

[options="step"]
--

[plantuml, profit, svg]
....
(*) -> "Cool, we've got the tools" as cool
cool -> "?"
"?" -> Profit
Profit -> (*)
....

That's the idea. Let's now go through what we got...
--

== Step 1: Create a bundle project

[plantuml, step1, svg]
....
(*) -> "Create a bundle project" as create
create -> "Work on the project"
....

To deploy something in Fuse we first have to create a deployable artifact. In our case we deploy OSGi bundles.

[options="step"]
.Generate a bundle project
....
mvn archetype:generate -Dfilter=org.apache.camel.archetypes:camel-archetype-scr
....

[options="step"]
.Work on the project
--
* Use your favorite IDE to work on the project.
* Add unit tests you can be proud of.
* Keep your source code in Git.
--

[options="step"]
I think the bundle is ready, now what?

== Step 2: Publish the bundle

[plantuml, step2, svg]
....
(*) -> "Create a bundle project" as create
create -> "Work on the project" as work
work -> "Publish the bundle" as publish_bundle
publish_bundle --> "Bundle available in Nexus"
....

.Publish the bundle
....
git notifiedpush
....

A custom Git alias, `notifiedpush`, works like regular `push` but also informs Jenkins CI server that we have pushed changes to central repository. Jenkins builds the bundle and stores the resulting artifact in Nexus.

[options="step"]
OK, I have the bundle artifact in a central store ready to be deployed. What next?

== Step 3: Prepare Fabric profiles

[plantuml, step3, svg]
....
(*) -> "Create a bundle project" as create
create -> "Work on the project" as work
work -> "Publish the bundle" as publish_bundle
publish_bundle -> "Prepare Fabric profiles"
publish_bundle --> "Bundle available in Nexus"
....

* Create a Fabric profile for the bundle and define profile dependencies (= parent profiles) using Fuse management tools in your dev environment.

[options="step"]
Then we just pass the configuration to other environments, right?

[options="step"]
.Right... if you can answer these questions:
--
* How can we move the configuration from one Fuse to another?
* How can we control which bundles (and which versions) should run in UAT and which ones in production?
* How can we manage environment specific parameters? I.e. when our Camel routes should behave a bit differently in UAT than in prod.
--

== Moving configuration from one Fuse to another

Fuse keeps its configuration in Git, so we'll use Git to move the configuration.

== Controlling which bundles (and versions) should run where

We'll leverage parent profile mechanism here.

== Managing environment specific parameters

We'll put the bundle configuration in properties and use property prefixes to cover the environment specifics.

[options="step"]
Alright, on with the show.

== Step 4: Publish the configuration

[plantuml, step4, svg]
....
(*) -> "Create a bundle project" as create
create -> "Work on the project" as work
work -> "Publish the bundle" as publish_bundle
publish_bundle -> "Prepare Fabric profiles" as profiles
publish_bundle --> "Bundle available in Nexus"
profiles -> "Publish the configuration" as publish_config
publish_config --> "UAT config updated and tagged"
....

.Publish the configuration
....
git notifiedpush
....

The configuration changes will now be deployed in User Acceptance Testing environment.

== Step 5: Promoting configuration to production

[plantuml, step5, svg]
....
(*) -> "Create a bundle project" as create
create -> "Work on the project" as work
work -> "Publish the bundle" as publish_bundle
publish_bundle -> "Prepare Fabric profiles" as profiles
publish_bundle --> "Bundle available in Nexus"
profiles -> "Publish the configuration" as publish_config
publish_config -> "Promote tagged config\nto production" as promote
publish_config --> "UAT config updated and tagged"
promote -> (*)
promote --> "Production config updated and tagged"
....

* Select a UAT configuration (typically the latest) and let Jenkins push it to production.

== Limiting the scope of configuration changes

Although we could update the whole Fuse branch when we are passing changes around, this could create unnecessary work in form of meaningless conflicts (changed profile refresh timestamps, and the like). So, we decided to attach a subtree to Fuse configuration which will be the only part of the hierarchy we update through our workflow.


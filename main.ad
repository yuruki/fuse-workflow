= Real World Enterprise Workflow for Red Hat JBoss Fuse
Jyrki Ruuskanen, Finavia Corporation, 2014
:backend: deckjs
:deckjs_theme: swiss
:status:
:split:

== Where do we start from?

* A team of 2-3 developers who also operate the environments (got the Devs and the Ops right there).
* Red Hat JBoss Fuse license for 16 processor cores.
* Green light from the bosses to make Fuse our next integration platform.

=== What are we trying to achieve?

* A highly available setup manageable by a small team.
* Manual steps kept at minimum, while keeping the setup simple.
* Everything versioned and reversible.

[options="step"]
--
[plantuml, profit, svg]
....
start
#PaleTurquoise:Cool, we're good to go;
:?;
#PaleGreen:Profit!;
stop
....

That's the idea. Now let's go through what we got...
--

== Step 1: Create a bundle project

[plantuml, step1_workflow, svg]
....
|Developer|
start
#PaleTurquoise:Create a bundle project;
:Work on the project;
|#PaleGreen|Nexus|
....

[options="step"]
To deploy something in Fuse we first have to create a deployable artifact. In our case we create and deploy OSGi bundles.

[options="step"]
Generate a bundle project with `mvn archetype:generate -Dfilter=org.apache.camel.archetypes:camel-archetype-scr`.

[options="step"]
.Work on the project
--
* Use your favorite IDE to work on the project.
* Add unit tests you can be proud of.
* Keep your source code in Git.
--

[options="step"]
I think the bundle is ready, now what?

== Step 2: Publish the bundle

[plantuml, step2_workflow, svg]
....
|Developer|
start
:Create a bundle project;
:Work on the project;
#PaleTurquoise:Publish the bundle;
|Jenkins|
:Build the bundle and upload to Nexus;
|#PaleGreen|Nexus|
:Artifact stored>
stop
....

[options="step"]
Publish the bundle with `git notifiedpush`.

[options="step"]
Custom Git alias, `notifiedpush`, works like regular `push` but also informs Jenkins CI server that we have pushed changes to central repository. Jenkins builds the bundle and stores the resulting artifact in Nexus.

[options="step"]
OK, I have the bundle artifact in a central store ready to be deployed. What next?

== Step 3: Prepare Fabric profiles

[plantuml, step3_workflow, svg]
....
|Developer|
start
#PaleTurquoise:Prepare Fabric profiles;
|?|
:?;
|UAT|
:Configuration updated;
|#PaleGreen|Production|
....

[options="step"]
Use your dev environment to create a Fabric profile for the bundle and define profile dependencies (= parent profiles).

[options="step"]
Then we just pass the configuration to other environments, right?

[options="step"]
.Right... but first answer these questions:
--
* How do we move the configuration from one Fuse environment to another?
* How do we control which bundles (and which versions) should run in UAT and which ones in production?
* How do we manage environment specific parameters? I.e. when our Camel routes should behave a bit differently in UAT than in prod.
--

[options="step"]
Let's pretend we have the answers and move on.

== Step 4: Publish the configuration

[plantuml, step4_workflow, svg]
....
|Developer|
start
:Prepare Fabric profiles;
#PaleTurquoise:Publish the configuration;
|Jenkins|
:Update UAT config and tag it;
|UAT|
:Configuration updated>
|#PaleGreen|Production|
....

[options="step"]
Publish the configuration with `git notifiedpush`.

[options="step"]
The configuration changes will now be deployed in User Acceptance Testing environment.

[options="step"]
When the UAT is accepted you are free to promote the configuration to production.

== Step 5: Promoting configuration to production

[plantuml, step5_workflow, svg]
....
|Developer|
start
:Prepare Fabric profiles;
:Publish the configuration;
|Jenkins|
:Update UAT config and tag it;
|UAT|
:Configuration updated>
|Developer|
#PaleTurquoise:Promote tagged config
to production;
|Jenkins|
:Update production config and tag it;
|#PaleGreen|Production|
:Configuration updated>
stop
....

[options="step"]
Select a tagged UAT configuration (typically the latest) and let Jenkins push it to production.

[options="step"]
Done.

== Demo

. Create a bundle project.
. Publish the bundle.
. Prepare Fabric profiles.
. Publish configuration.
. Promote configuration to production.

== Enabler 1: Moving configuration from one Fuse to another

[plantuml, fuse_git, svg]
....
title Fuse's distributed Git server
package "Fuse Fabric" {
		component "root\ncontainer" as root
		component "child\ncontainer" as child
		component "another child\ncontainer" as child2
		http -- [root]
		interface "Git\nmaster" as master
		interface "HTTP\n(Git servlet)" as http
		[root] - master
		http ..> master : use
		interface "Git\nslave" as git2
		[child] -- git2
		git2 ..> master : follow
		interface "Git\nslave" as git3
		[child2] -- git3
		git3 ..> master : follow
}
....

[options="step"]
* Fabric keeps its profiles in a Git repository
* This repository is exposed at `http://server:8181/git/fabric`

<<<

[plantuml, fuse_git2, svg]
....
package "Fuse Fabric" {
		component "root\ncontainer" as root
		component "child\ncontainer" as child
		component "another child\ncontainer" as child2
		http -- [root]
		interface "Git\nmaster" as master
		interface "HTTP\n(Git servlet)" as http
		[root] - master
		http ..> master : use
		interface "Git\nslave" as git2
		[child] -- git2
		git2 ..> master : follow
		interface "Git\nslave" as git3
		[child2] -- git3
		git3 ..> master : follow
}
[Git client] ..> http : fetch & push
note right of [Git client]
	You can use Fuse's fabric repository
	just like any other Git repository.
end note
....

[options="step"]
So, we'll just apply our changes to the tracking branch and push the changes to Fabric?

[options="step"]
You could, BUT...

<<<

[plantuml, fabric_minimum, svg]
....
package "Fabric cluster (3 nodes minimum)" {
	node "Host 3" {
		component "root\ncontainer" as root3
		component "child\ncontainer" as child3
		http3 -- [root3]
		[root3] -- [child3]
		interface "Git" as git31
		interface "HTTP\n(Git servlet)" as http3
		git31 - [root3]
		interface "Git" as git32
		git32 - [child3]
	}
	node "Host 2" {
		component "root\ncontainer" as root2
		component "child\ncontainer" as child2
		http2 -- [root2]
		[root2] -- [child2]
		interface "Git" as git21
		interface "HTTP\n(Git servlet)" as http2
		git21 - [root2]
		interface "Git" as git22
		git22 - [child2]
	}
	node "Host 1" {
		component "root\ncontainer" as root1
		component "child\ncontainer" as child1
		http1 -- [root1]
		[root1] -- [child1]
		interface "Git" as git11
		interface "HTTP\n(Git servlet)" as http1
		git11 - [root1]
		interface "Git" as git12
		git12 - [child1]
	}
}
....

[options="step"]
* Any container can be the Git master, and the master can change _at any time_.
* Push operation should be targeted to the host that has the Git master.
* Git servlet updates the Git of the root container on the same host, _not the actual master_.
* You can't force the Git master, short of shutting down every container in Fabric but one.

<<<

[plantuml, external_git, svg]
....
node "Auxiliary Server" {
	component "Git\nmaster" as master
}
package "Fabric cluster" {
	node "Host 3" {
		component "root\ncontainer" as root3
		component "child\ncontainer" as child3
		[root3] -- [child3]
		interface "Git\nslave" as git31
		git31 - [root3]
		git31 ..> master : follow
		interface "Git\nslave" as git32
		git32 - [child3]
		git32 ..> master : follow
	}
	node "Host 2" {
		component "root\ncontainer" as root2
		component "child\ncontainer" as child2
		[root2] -- [child2]
		interface "Git\nslave" as git21
		git21 - [root2]
		git21 ..> master : follow
		interface "Git\nslave" as git22
		git22 - [child2]
		git22 ..> master : follow
	}
	node "Host 1" {
		component "root\ncontainer" as root1
		component "child\ncontainer" as child1
		[root1] -- [child1]
		interface "Git\nslave" as git11
		git11 - [root1]
		git11 ..> master : follow
		interface "Git\nslave" as git12
		git12 - [child1]
		git12 ..> master : follow
	}
}
....

[options="step"]
* Set up a Git repository outside Fuse.
* Tell Fuse to use the external repository as Git master.

[options="step"]
Now everything works as it should!

== Enabler 2: Limiting the scope of configuration changes

[plantuml, git_flow, svg]
....
package "Dev Fabric" {
	node "Workstation" {
		component "Git" as git
	}
}
node "Auxiliary Server" {
	component "Git" as gitmaster
}
package "Target Fabric" {
	node "Host1" {
		component "Git" as git1
	}
	node "Host2" {
		component "Git" as git2
	}
	node "Host3" {
		component "Git" as git3
	}
}
git ..> gitmaster : updates
gitmaster ..> git1 : updates
gitmaster ..> git2 : updates
gitmaster ..> git3 : updates
....

[options="step"]
--
As we move the configuration around we make a distinction between:

* _/fabric/profiles/mycompany/_ subtree which has our profiles (let's call it *company subtree*), and
* _the rest_ which can be thought of as configuration of Fuse itself (let's call them *system profiles*).
--

<<<

[plantuml, limiting, svg]
....
object Configuration
Configuration *-- "Company subtree"
Configuration *-- "System profiles"
....

[options="step"]
--
Company subtree is attached to Fabric configuration as a Git subtree with:

* `git subtree add --prefix=/fabric/profiles/mycompany mycompany`.
--

[options="step"]
--
Company subtree is overwritten in Fabric configuration with:

* `git merge -ours --squash mycompany`
* `git rm -r -q --ignore-unmatch /fabric/profiles/mycompany`
* `git read-tree -u mycompany`
* `git commit -m "Update from mycompany"`
--

[options="step"]
With these tools we can automate the updates for company subtree part and be sure that system profiles are not touched.

== Enabler 3: Controlling which bundles (and versions) should run where

[plantuml, versions, svg]
....
package "Dev Fabric" {
	component "my-bundle/1.1-SNAPSHOT" as dev1 <<Next version>>
	component "other-bundle/1.0-SNAPSHOT" as dev2 <<In UAT>>
}
package "Test Fabric" {
	component "my-bundle/1.0.2" as test1 <<Released>>
	component "other-bundle/1.0-SNAPSHOT" as test2 <<In UAT>>
}
package "Production Fabric" {
	component "my-bundle/1.0.2" as prod1 <<Released>>
}
skinparam component {
	backgroundColor<<Next version>> Tomato
	backgroundColor<<In UAT>> Orange
	backgroundColor<<Released>> PaleGreen
}
....

[options="step"]
*Different environments* are running *different bundles* and *different versions of bundles*.

[options="step"]
But at the same time they use the *same company subtree*. How did we arrange that?

<<<

We'll define one top-level profile for each environment:

* `mycompany-dev-worker`
* `mycompany-test-worker`
* `mycompany-prod-worker`

[options="step"]
--
Our worker containers then have one of the above profiles assigned to them:

[plantuml, top_level, svg]
....
package "Dev Fabric" {
	node "Container" as devworker {
		component "mycompany-dev-worker" as dev
	}
}
package "Test Fabric" {
	node "Container" as testworker {
		component "mycompany-test-worker" as test
	}
}
package "Production Fabric" {
	node "Container" as prodworker {
		component "mycompany-prod-worker" as prod
	}
}
....
--

[options="step"]
Now, instead of assigning our other profiles directly to the containers, we assign them to the top-level profile as parents.

<<<

Top-level profiles:

* Bring bundle profile assignments into version control.
* Allow us to control what to run per environment.
* Allow us to use the same configuration across different systems.

== Enabler 4: Environment specific parameters for Camel

[plantuml, example_integration, svg]
....
title One profile, four behaviors
package "Dev Fabric" {
	node "Container" as devworker {
		component "mycompany-bundle-camel-test-1.0" as dev
	}
}
package "Test Fabric" {
	node "Container" as testworker {
		component "mycompany-bundle-camel-test-1.0" as test
	}
}
package "Production Fabric" {
	node "Container" as prodworker {
		component "mycompany-bundle-camel-test-1.0" as prod
	}
}
package "Unit test" {
	component "mycompany-bundle-camel-test-1.0" as unit
}
dev ..> [My dev source] : read
dev ..> [My dev target] : write
test ..> [Test source] : read
test ..> [Test target] : read
prod ..> [Source] : read
prod ..> [Target] : write
unit ..> [Mock source] : read
unit ..> [Mock target] : write
....

Often Camel routes should behave differently depending on whether they run in UAT or in production.

<<<

Our solution:

[options="step"]
[source,java]
.Use properties to define key route parameters
....
from("{{from}}")
   .routeId(camelRouteId)
   .log("Processed something")
   .to("{{to}}");
....

[options="step"]
.Set property prefix per environment in top-level profile
....
fabric:profile-edit --system camel.scr.properties.prefix=test mycompany-test-worker
....

[options="step"]
.Override default properties with prefixes when necessary
....
from = My dev source
test.from = Test source
prod.from = Source
unit.from = Mock source
....
